import { Form, Input, Modal, Radio, message } from "antd";
import {
  CSSProperties,
  FC,
  Fragment,
  PropsWithChildren,
  useState,
} from "react";

import "./index.css";

const { TextArea } = Input;

const FormContent = [
  {
    label: "B·∫°n t√™n g√¨ v·∫≠y?",
    name: "name",
    placeholder: "H·ªç v√† T√™n",
    type: "input",
    required: "B·∫°n qu√™n nh·∫≠p r·ªìi n√®!",
  },
  {
    label: "B·∫°n c√≥ s·ªë ƒëi·ªán tho·∫°i g√¨ v·∫≠y?",
    name: "phone",
    placeholder: "S·ªë ƒëi·ªán tho·∫°i",
    type: "input",
    required: "B·∫°n qu√™n nh·∫≠p r·ªìi n√®!",
  },
  {
    label: "B·∫°n c√≥ email g√¨ v·∫≠y?",
    name: "email",
    placeholder: "Email",
    type: "input",
    required: "",
  },
  {
    label: "ƒê·∫øn chung vui c√πng gia ƒë√¨nh nh√©!",
    name: "join",
    type: "radio",
    required: "Ch·ªçn m·ªôt c√°i nh√°!",
    options: [
      { label: "Ch·∫Øc ch·∫Øn r·ªìi üëåüòò", value: "Tham gia" },
      { label: "Xin l·ªói, m√¨nh c√≥ vi·ªác b·∫≠n r·ªìi üò≠", value: "Kh√¥ng" },
    ],
  },
  {
    label: "B·∫°n tham d·ª± ti·ªác n√†o nh·ªâ?",
    name: "partyType",
    type: "radio",
    radioClassName: "radio-item",
    required: "Ch·ªçn m·ªôt c√°i nh√°!",
    options: [
      { label: "Ti·ªác th√¢n m·∫≠t (Th·ª© 7, 22/03) üòö", value: "Th·ª© 7" },
      { label: "L·ªÖ Th√†nh H√¥n üòç (Ch·ªß nh·∫≠t, 23/03)", value: "Ch·ªß nh·∫≠t" },
      { label: "C·∫£ 2 üòé", value: "C·∫£ 2" },
    ],
  },
  {
    label: "B·∫°n l√†?",
    name: "related",
    type: "radio",
    required: "Ch·ªçn m·ªôt c√°i nh√°!",
    options: [
      { label: "B·∫°n c√¥ d√¢u üë∞", value: "CD" },
      { label: "B·∫°n ch√∫ r·ªÉ ü§µ", value: "CR" },
    ],
  },
  {
    label: "G·ª≠i l·ªùi ch√∫c m·ª´ng ƒë·∫øn ch√∫ r·ªÉ & c√¥ d√¢u",
    name: "wish",
    type: "textarea",
    required: "",
    rows: 4,
  },
];

type FormType = {
  name: string;
  join: string;
  partyType: string;
  related: string;
  wish: string;
};

const WEB_APP_URL =
  "https://script.google.com/macros/s/AKfycbwuOH5C5MPFWhNGqRpOuAWZkZDGLc4xtU_SHTWX8QlyKGOc90ebw-Fl3LRQHoExMPTTsA/exec";

const FormDK: FC<
  PropsWithChildren<{ className?: string; style?: CSSProperties }>
> = ({ style = {}, className = "", children }) => {
  const [form] = Form.useForm<FormType>();
  const [isLoading, setIsLoading] = useState(false);
  const [isOpen, setIsOpen] = useState(false);

  const [url, setUrl] = useState("");

  const openForm = () => setIsOpen(true);
  const closeForm = () => {
    if (isLoading) return;

    setIsOpen(false);
  };

  const handleSubmit = async (values: FormType) => {
    setIsLoading(true);

    try {
      const url = `${WEB_APP_URL}?${new URLSearchParams({
        ...values,
        time: new Date().toLocaleDateString("vi-VN"),
      }).toString()}`;
      setUrl(url);
    } catch (error) {
      console.error("Error saving data:", error);
      message.error("C√≥ ch√∫t v·∫•n ƒë·ªÅ, th·ª≠ l·∫°i nh√°! ‚ùå", 5);
    }
  };

  return (
    <Fragment>
      <div
        onClick={openForm}
        style={{ ...style, width: "max-content", height: "max-content" }}
        className={className}
      >
        {children}
      </div>

      {url && (
        <iframe
          src={url}
          referrerPolicy="no-referrer"
          onLoad={() => {
            setIsLoading(false);
            setIsOpen(false);
            form.resetFields();
            message.success("G·ª≠i Th√¥ng Tin Th√†nh C√¥ng! ‚úÖ", 10);
            setUrl("");
          }}
          onError={() => {
            message.error("C√≥ ch√∫t v·∫•n ƒë·ªÅ, th·ª≠ l·∫°i nh√°! ‚ùå", 5);
            setIsLoading(false);
            setUrl("");
          }}
        ></iframe>
      )}
      <Modal
        centered
        open={isOpen}
        title="X√ÅC NH·∫¨N THAM D·ª∞"
        className="modal-form-dk"
        onOk={form.submit}
        onCancel={closeForm}
        okText="X√°c nh·∫≠n"
        okButtonProps={{ loading: isLoading, disabled: isLoading }}
        cancelButtonProps={{ disabled: isLoading }}
        cancelText="H·ªßy"
      >
        <Form
          form={form}
          onFinish={handleSubmit}
          className="form-dk"
          layout="vertical"
          initialValues={{
            join: "Tham gia",
            partyType: "C·∫£ 2",
            related: "CD",
            wish: "",
          }}
        >
          {FormContent.map((item, index) => (
            <Form.Item
              key={index}
              className="form-dk-item"
              label={item.label}
              name={item.name}
              rules={[{ required: !!item.required, message: item.required }]}
            >
              {item.type === "input" && (
                <Input placeholder={item.placeholder} variant="underlined" />
              )}
              {item.type === "radio" && (
                <Radio.Group>
                  {item.options?.map((option, idx) => (
                    <Radio
                      key={idx}
                      className={item.radioClassName}
                      value={option.value}
                    >
                      {option.label}
                    </Radio>
                  ))}
                </Radio.Group>
              )}
              {item.type === "textarea" && (
                <TextArea rows={item.rows} placeholder="L·ªùi ch√∫c" />
              )}
            </Form.Item>
          ))}
        </Form>
      </Modal>
    </Fragment>
  );
};

export default FormDK;
